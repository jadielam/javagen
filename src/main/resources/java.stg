compilationUnit(package, inport, comment, class) ::= "<package><\n><\n><inport; separator=\"\n\"><\n><\n><comment><\n><class>"
inport(importName) ::= "import <importName>;"
package(packageName) ::= "package <packageName>;"
class(name, vissibilityModifier, extends, inplements, field, constructor, method, annotation, comment) ::= 
"<comment>
<annotation; separator=\"\n\">
<vissibilityModifier> <name><if(extends)> <extends><endif><if(inplements)> <inplements><endif> {
	<field; separator=\"\n\n\">
	
	<constructor; separator=\"\n\n\">

	<method; separator=\"\n\n\">

}"

extends(extendedClass) ::= "extends <extendedClass>"

inplements(interface) ::= "implements <interface; separator=\", \">"

field(comment, annotation, vissibilityModifier, type, name) ::= "<comment><\n><annotation; separator=\"\n\"><\n><if(vissibilityModifier)><vissibilityModifier> <endif><if(isFinal)><isFinal> <endif> <endif><if(isFinal)><isFinal> <endif><type> <name>;"

constructor(comment, annotation, vissibilityModifier, className, functionArgument, body) ::= 
"<comment>
<annotation; separator=\"\n\">
<if(vissibilityModifier)><vissibilityModifier> <endif><className>(<functionArgument; separator=\", \">) {
	<body>
	
}"

functionArgument(argumentType, argumentName) ::="<argumentType> <argumentName>"

annotation(name, attributeValue) ::= "@<name>(<attributeValue; separator =\", \">)"

attributeValue(attribute, value) ::= "<attribute>=\"<value>\""

method(vissibilityModifier, isFinal, isSynchronized, isStatic, returnType, methodName, functionArgument, annotation, comment, body, throws) ::= 
"<comment>
<annotation; separator=\"\n\">
<if(vissibilityModifier)><vissibilityModifier> <endif><if(isFinal)><isFinal> <endif><if(isSynchronized)><isSynchronized> <endif><if(isStatic)><isStatic> <endif><returnType> <methodName>(<functionArgument; separator=\", \">)<if(throws)> <throws><endif> {
	<body>
	
}"

throws(exception) ::= "throws <exception; separator=\", \">"